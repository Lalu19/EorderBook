#pragma checksum "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6ae48579d910d4b0d225b2379994c810115d9989"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Store_CreateStoreTransaction), @"mvc.1.0.view", @"/Views/Store/CreateStoreTransaction.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6ae48579d910d4b0d225b2379994c810115d9989", @"/Views/Store/CreateStoreTransaction.cshtml")]
    #nullable restore
    public class Views_Store_CreateStoreTransaction : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 5 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
  
    ViewBag.Title = "Store Transaction";
    string apiUrl = Configuration.GetValue<string>("WebAPIBaseUrl");

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<!-- PAGE-HEADER -->
<div class=""page-header"">
    <ol class=""breadcrumb"">
        <li class=""breadcrumb-item""><a href=""#""><i class=""fe fe-file-text mr-1""></i>Admin Consol</a></li>
        <li class=""breadcrumb-item active"" aria-current=""page"">Store Transaction</li>
    </ol>
</div>
<!-- PAGE-HEADER END -->

<div class=""row"">
    <div class=""col-md"">
        <div class=""card overflow-hidden"">
            <div class=""card-header"">
                <h3 class=""card-title"">Store Transaction</h3>
            </div>
            <div class=""card-body"">
                <form action=""#"" role=""form"" class=""validate"" id=""formPost"">
                    <div class=""row"">
                        <div class=""col-md-4"">
                            <div class=""form-group"">
                                <label class=""form-label"">Store Name &nbsp;<span style=""color: red;""><b>*</b></span></label>
                                <div class=""input-box"">
                                    <select class=""fo");
            WriteLiteral(@"rm-control"" id=""storename"">
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class=""col-md-4"">
                            <div class=""form-group"">
                                <label class=""form-label"">Receipt Upload &nbsp;<span style=""color: red;""><b>*</b></span></label>
                                <input type=""file"" class=""form-control"" id=""receiptimg"" required>
                            </div>
                        </div>


                    </div>
                    <div class=""row"">
                        <div class=""col-md-4"">
                            <div class=""form-group"">
                                <label class=""form-label"">Credit Balnce &nbsp;<span style=""color: red;""><b>*</b></span></label>
                                <input type=""number"" class=""form-control"" name=""crblance"" id=""crblance"" placeholder=""Credit Balnce"" readonl");
            WriteLiteral(@"y>
                            </div>
                        </div>

                        <div class=""col-md-4"">
                            <div class=""form-group"">
                                <label class=""form-label"">Debit Balance &nbsp;<span style=""color: red;""><b>*</b></span></label>
                                <input type=""number"" class=""form-control"" name=""dbbalance"" id=""dbbalance"" placeholder=""Debit Balance"" required>
                            </div>
                        </div>

                        <div class=""col-md-4"">
                            <div class=""form-group"">
                                <label class=""form-label"">Outstanding &nbsp;<span style=""color: red;""><b>*</b></span></label>
                                <input type=""number"" class=""form-control"" name=""outstanding"" id=""outstanding"" placeholder=""Outstanding"" readonly>
                            </div>
                        </div>
                    </div>

                    <div class");
            WriteLiteral(@"=""row"">
                        <div class=""col-md-12"">
                            <button type=""button"" id=""btncreate"" class=""btn btn-radius btn-success"">Create</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"

    <script>
        // Get references to the input and result elements
        const crblanceElement = document.getElementById('crblance');
        const dbbalanceElement = document.getElementById('dbbalance');
        const outstandingElement = document.getElementById('outstanding');

        // Add event listeners to both input elements
        crblanceElement.addEventListener('input', calculateOutstanding);
        dbbalanceElement.addEventListener('input', calculateOutstanding);

        // Function to calculate the outstanding value and update the textbox
        function calculateOutstanding() {
            // Get the values from the input elements and convert them to numbers
            const crblance = parseFloat(crblanceElement.value);
            const dbbalance = parseFloat(dbbalanceElement.value);

            // Check if both inputs are valid numbers
            if (!isNaN(crblance) && !isNaN(dbbalance)) {
                // Perform the subtraction operation
              ");
                WriteLiteral(@"  const outstandingValue = crblance - dbbalance;

                // Update the outstanding textbox with the calculated value
                outstandingElement.value = outstandingValue;
            } else {
                // If any input is not a valid number, show an error message or reset the outstanding textbox
                outstandingElement.value = 'Invalid Input';
            }
        }
    </script>




    <script>
        Getbeat()
        async function Getbeat(Id) {
            var opt = '';
            $.ajax({
                type: ""GET"",
                url: """);
#nullable restore
#line 121 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
                 Write(apiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral("/api/Store/GetStoreListByUserId/\" + ");
#nullable restore
#line 121 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
                                                            Write(Context.Session.GetInt32("UserId"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@",
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                success: function (res) {
                    var options = [];
                    options.push('<option value = """" > Select Store </option>');
                    for (var i = 0; i < res.data.length; i++) {
                        if (Id == res.data[i].beatId) {
                            opt = 'selected'
                        } else {
                            opt = '';
                        }
                        options.push('<option value = ""' + res.data[i].storeId + '"" ' + opt + ' > ' + res.data[i].storeName + '</option>');
                    }
                    $(""#storename"").html(options.join(''));
                },

                error: function (data) {
                    if (data.status == 401) {
                        window.location.replace('/Message/TokenExpire');
                    } else if (data.status == 403) {
                        w");
                WriteLiteral(@"indow.location.replace('/Message/Unauthorize');
                    }
                }
            });
        }

        $(""#storename"").change(async function () {
            var storeId = $(""#storename"").val()
            $.ajax({
                type: ""GET"",
                url: """);
#nullable restore
#line 152 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
                 Write(apiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral("/api/Store/GetSingleStore/\" + storeId,\r\n                contentType: \"application/json; charset=utf-8\",\r\n                headers: {\r\n                    \"authorization\": \"Bearer ");
#nullable restore
#line 155 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
                                        Write(Context.Session.GetString("TokenTxt"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"""
                },
                dataType: ""json"",
                success: function (data) {
                    if (data) {
                        $('#crblance').val(data.creditBalance);
                    }
                    else {
                        sweetAlert(""Validation Alert!"", ""Something unexpected!"", ""warning"");
                    }
                },
                error: function (data) {
                    if (data.status == 401) {
                        window.location.replace('/Message/TokenExpire');
                    } else if (data.status == 403) {
                        window.location.replace('/Message/Unauthorize');
                    }
                }
            });
        });

        $(""#btncreate"").click(function (e) {
            if (!document.getElementById(""formPost"").checkValidity()) {
                e.preventDefault();
            } else {
                imgPath = '';
                var totalFiles = document.getElementById('rece");
                WriteLiteral(@"iptimg').files.length;
                if (totalFiles > 0) {
                    uploadFile();
                }

                var model = {
                    storeId: parseInt($(""#storename"").val()),
                    receipt: imgPath,
                    creditBalance: $.trim($(""#crblance"").val()),
                    debitBalance: $.trim($(""#dbbalance"").val()),
                    totalOutstanding: $.trim($(""#outstanding"").val()),
                    agentId: ");
#nullable restore
#line 192 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
                        Write(Context.Session.GetInt32("UserId"));

#line default
#line hidden
#nullable disable
                WriteLiteral(",\r\n                    createdBy: ");
#nullable restore
#line 193 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
                          Write(Context.Session.GetInt32("UserId"));

#line default
#line hidden
#nullable disable
                WriteLiteral(",\r\n                }\r\n                $.ajax({\r\n                    type: \"POST\",\r\n                    url: \"");
#nullable restore
#line 197 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
                     Write(apiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral("/api/CreditHistory/TransactionCreate\",\r\n                    data: JSON.stringify(model),\r\n                    contentType: \"application/json; charset=utf-8\",\r\n                    headers: {\r\n                        \"authorization\": \"Bearer ");
#nullable restore
#line 201 "E:\Pravat Project\EOrderBook\AdminClient\Views\Store\CreateStoreTransaction.cshtml"
                                            Write(Context.Session.GetString("TokenTxt"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"""
                    },
                    dataType: ""json"",
                    success: function (data, statusText, xhr) {
                        if (xhr.status === 200) {
                            console.log(data);
                            sweetAlert({
                                html: true,
                                title: ""Transaction"",
                                text: ""Successfully Created!"",
                                type: ""success""
                            });
                        } else if (data.status === ""duplicate"") {
                            sweetAlert(""Validation Alert!"", data.responseMsg, ""warning"");
                        } else if (data.status === ""error"") {
                            sweetAlert(""Validation Alert!"", data.responseMsg, ""warning"");
                        } else {
                            sweetAlert(""Validation Alert!"", ""Something unexpected!"", ""warning"");
                        }
                    },
           ");
                WriteLiteral(@"         error: function (data) {
                        if (data.status == 401) {
                            window.location.replace('/Message/TokenExpire');
                        } else if (data.status == 403) {
                            window.location.replace('/Message/Unauthorize');
                        } else if (data.status == 400) {
                            sweetAlert(""Validation Alert!"", ""Please check input data!"", ""warning"");
                        }
                    }
                });


            }
        });

        function uploadFile() {
            var totalFiles = document.getElementById('receiptimg').files.length;
            if (totalFiles > 0) {
                var formData = new FormData();
                var files = document.getElementById('receiptimg').files;
                formData.append(""file"", files[0]);
                $.ajax(
                    {
                        url: ""/Upload/ImgUpload"",
                        data: formDat");
                WriteLiteral(@"a,
                        processData: false,
                        contentType: false,
                        async: false,
                        type: ""POST"",
                        success: function (data) {
                            imgPath = data;

                        },
                        error: function (data) {
                            window.location.replace('/Message/SessionExpire');
                        }
                    }
                );
            }

        }

    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IConfiguration Configuration { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
