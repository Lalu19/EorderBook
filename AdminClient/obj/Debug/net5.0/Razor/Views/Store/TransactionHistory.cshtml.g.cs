#pragma checksum "D:\Santosh\EOrderBook\AdminClient\Views\Store\TransactionHistory.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "820a8ff3d0c9c25262623425a906b7ed755a6f6c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Store_TransactionHistory), @"mvc.1.0.view", @"/Views/Store/TransactionHistory.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Santosh\EOrderBook\AdminClient\Views\Store\TransactionHistory.cshtml"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Santosh\EOrderBook\AdminClient\Views\Store\TransactionHistory.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"820a8ff3d0c9c25262623425a906b7ed755a6f6c", @"/Views/Store/TransactionHistory.cshtml")]
    #nullable restore
    public class Views_Store_TransactionHistory : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 5 "D:\Santosh\EOrderBook\AdminClient\Views\Store\TransactionHistory.cshtml"
  
    ViewBag.Title = "Store Transaction Verify";
    string apiUrl = Configuration.GetValue<string>("WebAPIBaseUrl");

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<!-- PAGE-HEADER -->
<div class=""page-header"">
    <ol class=""breadcrumb"">
        <li class=""breadcrumb-item""><a href=""#""><i class=""fe fe-file-text mr-1""></i>Admin Consol</a></li>
        <li class=""breadcrumb-item active"" aria-current=""page"">Transaction History</li>
    </ol>
</div>

<div class=""row"">
    <div class=""col-md-12 col-lg-12"">
        <div class=""card"">
            <div class=""card-header"">
                <div class=""card-title"">Transaction History</div>
            </div>
            <div class=""card-body"">
                <div class=""table-responsive"">
                    <table id=""StoreloadStoreTransction_Tb"" class=""table table-striped table-bordered nowrap dataTable no-footer dtr-inline"" style=""width:100%"">
                        <thead>
                            <tr>
                                <th>Store Name</th>
                                <th>Transaction Id</th>
                                <th>Date/Time</th>
                                <th>Cr(₹)");
            WriteLiteral(@"</th>
                                <th>db(₹)</th>
                                <th>OutStanding(₹)</th>
                                <th>Transaction By</th>
                                <th>Receipt</th>
                                <th>Approve By</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script>\r\n        var storeId = ");
#nullable restore
#line 47 "D:\Santosh\EOrderBook\AdminClient\Views\Store\TransactionHistory.cshtml"
                 Write(ViewBag.storeId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
        loadStoreTransction()
        function loadStoreTransction() {
            var table = $('#StoreloadStoreTransction_Tb').DataTable();
            table.destroy();
            table = $('#StoreloadStoreTransction_Tb').dataTable({
                ""paginationType"": ""full_numbers"",
                ""dom"": 'Bfrtip',
                ""buttons"": ['copy', 'csv', 'excel', 'pdf', 'print'],
                ""searching"": true,
                ""paging"": true,
                ""sort"": true,
                ""info"": true,
                ""ajax"": {
                    ""url"": '");
#nullable restore
#line 61 "D:\Santosh\EOrderBook\AdminClient\Views\Store\TransactionHistory.cshtml"
                       Write(apiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral("/api/CreditHistory/GetAllCrditHistoryByUserId/\' + ");
#nullable restore
#line 61 "D:\Santosh\EOrderBook\AdminClient\Views\Store\TransactionHistory.cshtml"
                                                                                Write(Context.Session.GetInt32("UserId"));

#line default
#line hidden
#nullable disable
                WriteLiteral(",\r\n                    \"type\": \"GET\",\r\n                    \"dataType\": \"json\",\r\n                    \"headers\": {\r\n                        \"authorization\": \"Bearer ");
#nullable restore
#line 65 "D:\Santosh\EOrderBook\AdminClient\Views\Store\TransactionHistory.cshtml"
                                            Write(Context.Session.GetString("TokenTxt"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"""
                    },
                    ""error"": function (data) {
                        if (data.status == 401) {
                            window.location.replace('/Message/TokenExpire');
                        } else if (data.status == 403) {
                            window.location.replace('/Message/Unauthorize');
                        }
                    }
                },
                ""order"": [],
                ""columns"": [
                    { ""data"": ""storeName"", ""orderable"": true, ""visible"": true },
                    { ""data"": ""transactionID"", ""orderable"": true, ""visible"": true },
                    {
                        ""data"": ""createdOn"",
                        ""render"": function (data) {
                            if (data === null) return """";
                            var date = new Date(data);
                            var month = date.getMonth() + 1;
                            return (month.length > 1 ? month : ""0"" + month) + ""/"" + dat");
                WriteLiteral(@"e.getDate() + ""/"" + date.getFullYear() + ""&nbsp;&nbsp;"" + (date.getHours() < 10 ? (""0"" + date.getHours()) : date.getHours()) + "":"" + (date.getMinutes() < 10 ? (""0"" + date.getMinutes()) : date.getMinutes());
                        }
                    },
                    {
                        ""render"": function (data, type, row) {

                            return '<p style=""color:#25dd25;"">' + '+' + row.creditBalance + '</p>';

                        }
                    },
                    {
                        ""render"": function (data, type, row) {

                            return '<p style=""color:red;"">' + '-' + row.debitBalance + '</p>';

                        }
                    },
                    {
                        ""render"": function (data, type, row) {

                            return '<p style=""color: blue;"">' + '₹' + row.totalOutstanding + '</p>';

                        }
                    },
                    { ""data"": ""agentName");
                WriteLiteral(@""", ""orderable"": true, ""visible"": true },
                    {
                        ""render"": function (data, type, row) {
                            if (row.image === '')
                                return '';
                            else
                                return '<img style=""max-width: 65%;"" src=""' + row.receipt + '""/>' + '&nbsp&nbsp&nbsp&nbsp<a href=""' + row.receipt + '"" target=""_blank""><i class=""fa fa-eye"" style=""color: black;""></i></a>'

                        }
                    },
                    { ""data"": ""fullName"", ""orderable"": true, ""visible"": true },
                ]
            });
        }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IConfiguration Configuration { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
